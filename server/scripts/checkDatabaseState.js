const mongoose = require('mongoose');
const Assignment = require('../models/AssignmentModel');
const User = require('../models/userModel');

// Connexion √† la base de donn√©es
mongoose.connect("mongodb+srv://walidchaffar:PFE2025@pfecluster.vkdu7.mongodb.net/PFEDB?retryWrites=true&w=majority&appName=PFECluster");

const checkDatabaseState = async () => {
  try {
    console.log('üîç V√©rification de l\'√©tat de la base de donn√©es...\n');

    // V√©rifier les utilisateurs
    const users = await User.find({}, 'fullName role manager').populate('manager', 'fullName');
    console.log(`üë• Total utilisateurs: ${users.length}`);
    
    // Afficher les managers et leurs √©quipes
    const managers = users.filter(user => user.role === 'Manager' || user.role === 'BUDirector');
    console.log(`üë®‚Äçüíº Managers: ${managers.length}`);
    
    for (const manager of managers) {
      const teamMembers = users.filter(user => 
        user.manager && user.manager._id.toString() === manager._id.toString()
      );
      console.log(`\nüìã Manager: ${manager.fullName} (${manager.role})`);
      console.log(`   √âquipe: ${teamMembers.length} membres`);
      teamMembers.forEach(member => {
        console.log(`   - ${member.fullName}`);
      });
    }

    // V√©rifier les affectations
    const assignments = await Assignment.find()
      .populate('employee', 'fullName manager')
      .populate('Owner', 'fullName role')
      .populate('project', 'projectName')
      .populate('taskId', 'taskName');

    console.log(`\nüìä Total affectations: ${assignments.length}`);

    if (assignments.length > 0) {
      console.log('\nüìã D√©tail des affectations:');
      assignments.forEach((assignment, index) => {
        console.log(`${index + 1}. Affectation ID: ${assignment._id}`);
        console.log(`   - Employ√©: ${assignment.employee?.fullName || 'NON D√âFINI'}`);
        console.log(`   - Owner: ${assignment.Owner?.fullName || 'NON D√âFINI'} (${assignment.Owner?.role || 'N/A'})`);
        console.log(`   - Projet: ${assignment.project?.projectName || 'NON D√âFINI'}`);
        console.log(`   - T√¢che: ${assignment.taskId?.taskName || 'NON D√âFINI'}`);
        console.log(`   - P√©riode: ${assignment.startDate} ‚Üí ${assignment.endDate}`);
        
        if (assignment.employee?.manager) {
          const isConsistent = assignment.employee.manager.toString() === assignment.Owner?._id.toString();
          console.log(`   - Coh√©rence: ${isConsistent ? '‚úÖ' : '‚ùå'}`);
        } else {
          console.log(`   - Coh√©rence: ‚ùå (employ√© sans manager)`);
        }
        console.log('');
      });
    } else {
      console.log('‚ùå Aucune affectation trouv√©e dans la base !');
    }

    // V√©rifier les projets et t√¢ches
    const Project = require('../models/projectModel');
    const Task = require('../models/taskModel');

    const projects = await Project.find({}, 'projectName');
    const tasks = await Task.find({}, 'taskName');

    console.log(`üìÅ Total projets: ${projects.length}`);
    console.log(`üìã Total t√¢ches: ${tasks.length}`);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    mongoose.connection.close();
  }
};

checkDatabaseState();